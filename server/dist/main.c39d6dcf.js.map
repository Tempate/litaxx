{"version":3,"sources":["lib/move.ts","lib/board.ts","main.ts"],"names":[],"mappings":";;;;;;AEAA,IAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,OAAO,CAAC,GAAR,CAAY,OAAA,CAAA,KAAZ;AAEA,IAAM,MAAM,GAAG,EAAE,EAAjB;AAEA,IAAM,QAAQ,GAAG,QAAQ,CAAC,aAAT,CAAuB,gBAAvB,CAAjB;AAEA,QAAQ,CAAC,gBAAT,CAA0B,QAA1B,EAAoC,UAAA,KAAK,EAAG;AACxC,EAAA,KAAK,CAAC,cAAN;ADTJ,ADAA,AEUI,EAAA,EDVJ,ADAA,IEUU,CAAC,CDVX,CDAA,ECAA,ACUI,CFVJ,AEUgB,MDVhB,CAAA,ADAA,CAAA,EEUI,KDVJ,CAAA,CDAA,CAAA;AEWC,CAHD;ADNA,ADAA,AEWA,IDXK,ADAO,AEWN,MDXN,EDAA,CEWe,GAAG,QAAQ,CAAC,aAAT,CAAuB,cAAvB,CAAlB;AACA,IAAM,OAAO,GAAG,QAAQ,CAAC,aAAT,CAAuB,UAAvB,CAAhB;ADZA,ADAA,AEcA,CDdA,ADAA,QEcS,CAAC,CDdL,ADAO,MCAZ,EAAW,ADAX,EAAoB,KEcpB,CAA2B,QAA3B,EAAqC,UAAA,KAAK,EAAG;ADbzC,ADAA,AEcA,EDdA,ADAA,AEcA,KAAK,CDdL,ACcM,CDdN,CDAA,CAAA,ICAA,CAAA,GDAA,CAAA,EEcA,CDdA,CAAA,GAAA,CAAA,ADAA,CCAA,ADAA,GCAA,ADAA,CAAA,CAAA,GAAA,ECAA,MDAA;ACAO,ADAC,AEeR,EDfO,ADAC,AEeR,MDfO,ACeD,CDfC,ACeA,CFfC,CAAA,EEeR,CAAY,CDfL,CAAA,GDAC,CAAA,GCAD,CAAA,CCeP,EDfO,ACekB,CDflB,ADAC,CCAD,ADAC,GCAD,ADAC,CAAA,CAAA,AEewB,CAAC,EFfzB,ECAD,CCeP,KFfQ;ACCX,ADDmB,AEgBnB,CDjBD,ACcA,CFboB,CCDf,MAAM,CDCS,CAAA,GCDf,KDCe,CCDT,ADCS,GCDT,EAAA,CAAX,ADCoB,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACnB,AEiBD,CFnBA,EAAY,GEmBN,CAAC,EAAP,CAAU,CFnBU,GAAR,EEmBZ,EAAkB,GFnBN,CAAA,MEmBM,EFnBN,KAAA,AEmBa,EAAG,KFnBhB,CAAA,QAAA,GAAQ,EAAR,CAAZ;ACIA,ACgBI,EAAA,EDhBC,KCgBM,CAAC,GDhBZ,ACgBI,CAAY,eAAZ,EAA6B,OAA7B;AACH,CAFD,GFfa;ACAb,ADMI,CCNJ,UAAK,KDMW,EAAZ,ECNJ,ADM4B,ECNd,EDMV,EAAqC;ACLrC,ADKqC,AEazC,EDlBI,OCkBK,EDlBL,CAAA,ICkBJ,CAAiB,EAAjB,EDlBI,ACkBe,CDlBf,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AAAO,ACmBP,EDnBO,ICmBD,KDnBC,CAAA,ACmBK,GAAG,MDnBR,CAAA,CCmBgB,CAAC,EAAE,CDnBnB,ACmBoB,CDnBpB,GAAA,CAAA,CAAA,ACmBiB,CAAU,CAAV,CDnBjB,ACmBgB,CAAvB,IDnBO;AAAK,ADMR,AEcJ,EDpBY,ICoBN,GFdG,ECNG,ADMR,AEcO,CDpBC,EDME,AEcA,IAAI,GDpBN,ADME,CCNF,ADME,GEcI,CAAA,CFdJ,CAAM,CCNR,CAAA,CCoBE,EDpBF,ACoBZ,CDpBY,CAAA,GAAA,OAAA,GDME,CAA2B,EAA3B,CAAV;ACNe,ACqBnB,EDrBmB,ICqBb,KDrBa,CAAA,CCqBN,GAAG,KDrBG,ACqBE,CDrBF,ACqBG,ODrBH,CAAA,GAAA,CAAA,CAAA,GAAA,CCqBH,CAAwB,KDrBrB,ECqBqB,CAAA,KAAA,CAAM,oBAAN,CAA2B,MAA3B,CAAxB,CAAhB;ADpBH,ADOO,AEeJ,CDxBJ,CCwBI,CDxBC,KDSO,CEeD,CAAC,EDxBE,ADSE,IAAI,CCTf,ACwBD,CAAgB,OFfZ,CCTM,CDSiB,CEeX,CDxBN,EAAA,CAAd,ECwB0B,EAAG;AFdjB,AEeJ,IAAA,OFfS,CEeD,CAAC,EFfL,GAAY,QAAQ,CAAC,AEezB,CAAwB,KFfpB,CEe0B,MAA9B,EAAsC,SAAtC,CAAgD,OAAhD;AFdI,AEeP,GAFD,CDpBS,ODOI,IAAL,GAAY,CAAC,CAAb;ACCR,ADAK,AEeR,KFlBO,MAGO,QCAX;AAAA,ADCQ,WAAK,IAAL,GAAY,QAAQ,CAAC,MAArB;AACA,WAAK,IAAL,GAAY,OAAA,CAAA,KAAA,CAAM,oBAAN,CAA2B,IAA3B,CAA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","file":"main.c39d6dcf.js","sourceRoot":"../../client","sourcesContent":["import { Board } from './board'\n\nexport enum MoveType {\n    Single, Double, Null\n}\n\nexport class Move {\n    from: number;\n    to: number;\n\n    type: MoveType;\n\n    constructor(to: string, from?: string) {\n        this.to = Board.coordinate_to_square(to);\n\n        if (from == undefined) {\n            this.type = MoveType.Single;\n            this.from = -1;\n        } else {\n            this.type = MoveType.Double;\n            this.from = Board.coordinate_to_square(from);\n        }\n    }\n\n    toString(): string {\n        switch (this.type) {\n            case MoveType.Single:\n                return Board.square_to_coordinate(this.to);\n            case MoveType.Double:\n                return Board.square_to_coordinate(this.from) + Board.square_to_coordinate(this.to);\n            case MoveType.Null:\n                return '0000';\n        }\n    }\n}","import { Move, MoveType } from './move';\n\nenum Player {\n    White, Black\n}\n\nenum StoneType {\n    Blank, Gap, White, Black\n}\n\nexport class Board {\n    stones: StoneType[];\n\n    turn: Player;\n\n    ply: number;\n    fifty_moves_counter: number;\n\n    constructor() {\n        this.stones = [];\n\n        for (let i = 0; i < 49; i++)\n            this.stones.push(StoneType.Blank);\n\n        this.turn = Player.Black;\n        this.ply = 0;\n        this.fifty_moves_counter = 0;\n    }\n\n    to_fen(): string {\n        let fen: string = \"\";\n\n        for (let y = 6; y >= 0; y--) {\n            for (let x = 0; x < 7; x++) {\n                const square: number = y * 7 + x;\n                const stone: StoneType = this.stones[square];\n\n                switch (stone) {\n                    case StoneType.Blank:\n                        // If the last character is a number, increase it.\n                        // Otherwise, append a 1.\n\n                        if (fen.length == 0 || isNaN(Number(fen.charAt(fen.length - 1)))) {\n                            fen += '1';\n                        } else {\n                            fen = fen.substring(0, fen.length - 1);\n                            fen += (Number(fen.charAt(fen.length - 1)) + 1).toString();\n                        }\n\n                        break;\n                    case StoneType.Black:\n                        fen += 'x';\n                        break;\n                    case StoneType.White:\n                        fen += 'o';\n                        break;\n                    case StoneType.Gap:\n                        fen += '-';\n                        break;\n                }\n            }\n\n            fen += '/';\n        }\n\n        fen += ' ';\n        fen += (this.turn == Player.Black) ? 'x' : 'o';\n\n        fen += ' ';\n        fen += this.fifty_moves_counter.toString();\n        \n        fen += ' ';\n        fen += this.ply.toString();\n\n        return fen;\n    }\n\n    from_fen(fen: string) {\n        const fen_parts = fen.split(' ');\n\n        // Load the board state\n        const board_fen = fen_parts[0];\n\n        let x: number = 0;\n        let y: number = 6;\n\n        for (let i = 0; i < board_fen.length; i++) {\n            const square = y * 7 + x;\n            const fen_char = board_fen.charAt(i);\n\n            switch (fen_char) {\n                case 'x':\n                    this.stones[square] = StoneType.Black;\n                    x++;\n                    break;\n                case 'o':\n                    this.stones[square] = StoneType.White;\n                    x++;\n                    break;\n                case '-':\n                    this.stones[square] = StoneType.Gap;\n                    x++;\n                    break;\n                case '1':\n                case '2':\n                case '3':\n                case '4':\n                case '5':\n                case '6':\n                case '7':\n                    // Add as many blank stones as the number indicates\n                    const blank_stones_count = fen.charCodeAt(i) - Number('0');\n\n                    for (let k = 0; k < blank_stones_count; k++) {\n                        this.stones[square + k] = StoneType.Blank;\n                    }\n\n                    x += blank_stones_count;\n                    break;\n                case '/':\n                    x = 0;\n                    y--;\n                    break;\n            }\n        }\n\n        // Load the turn\n        switch (fen_parts[1].charAt(0)) {\n            case 'x':\n            case 'X':\n            case 'b':\n            case 'B':\n                this.turn = Player.Black;\n                break;\n            case 'o':\n            case 'O':\n            case 'w':\n            case 'W':\n                this.turn = Player.White;\n                break;\n        }\n\n        // Load counters\n        this.fifty_moves_counter = Number(fen_parts[2]) - Number('0');\n        this.ply = Number(fen_parts[3]) - Number('0');\n    }\n\n    is_legal(move: Move): boolean {\n        const friendly_stone_type = (this.turn == Player.White) ? StoneType.White : StoneType.Black;\n\n        if (move.type == MoveType.Null) {\n\n            // Iterate through all blank squares and check that no friendly stone\n            // can move or jump to it.\n            for (let square = 0; square < this.stones.length; square++) {\n                if (this.stones[square] != StoneType.Blank)\n                    continue;\n\n                if (this.surrounding_stones(square, friendly_stone_type, 2).length > 0)\n                    return false; \n            }\n\n            return true;\n        }\n\n        // Check that move.to's value is within range\n        if (move.to < 0 || move.to >= 49)\n            return false;\n\n        // Check that the destination is empty\n        if (this.stones[move.to] != StoneType.Blank)\n            return false;\n\n        switch (move.type) {\n            case MoveType.Single:\n\n                // Check that there is an adjacent, friendly stone to make the move\n                return this.surrounding_stones(move.to, friendly_stone_type, 1).length > 0;\n            \n            case MoveType.Double:\n                // Check that move.from's value is within range\n                if (move.from < 0 || move.from >= 49)\n                    return false;\n\n                // Check that there's a friendly stone at the departure square\n                return this.stones[move.from] == friendly_stone_type;\n        }\n\n        return false;\n    }\n\n    make(move: Move) {\n        let friendly_stone_type: StoneType;\n        let hostile_stone_type: StoneType;\n\n        if (this.turn == Player.White) {\n            friendly_stone_type = StoneType.White;\n            hostile_stone_type = StoneType.Black;\n        } else {\n            friendly_stone_type = StoneType.Black;\n            hostile_stone_type = StoneType.White;\n        }\n\n        let new_fifty_moves_counter = 0;\n\n        switch (move.type) {\n            case MoveType.Double:\n                // Remove the stone that's jumping\n                this.stones[move.from] = StoneType.Blank;\n\n                // Increase the fifty-moves counter\n                new_fifty_moves_counter = this.fifty_moves_counter + 1;\n\n                // no break\n            case MoveType.Single:\n                // Place a friendly stone at the destination\n                this.stones[move.to] = friendly_stone_type;\n\n                // Capture all adjacent, hostile stones\n                this.surrounding_stones(move.to, hostile_stone_type, 1).forEach(square => {\n                    this.stones[square] = friendly_stone_type;\n                });\n\n                break;\n        }\n\n        // Swap the turn\n        if (this.turn == Player.White)\n            this.turn = Player.Black;\n        else\n            this.turn = Player.White;\n\n        // Update the fifty-moves counter\n        this.fifty_moves_counter = new_fifty_moves_counter;\n\n        this.ply += 1;\n    }\n\n    reachable_squares(coordinate: string): number[] {\n        const square = Board.coordinate_to_square(coordinate);\n        return this.surrounding_stones(square, StoneType.Blank, 2);\n    }\n\n    // List all the squares in the surroundings of a stone \n    // that contain stones of a given type.\n\n    // The margin indicates how big those surroundings are.\n    // For instance, a margin of 1 would comprehend adjacent squares.\n    surrounding_stones(square: number, type: StoneType, margin: number): number[] {\n        let squares: number[] = [];\n\n        const move_to_x = square % 7;\n        const move_to_y = Math.floor(square / 7);\n\n        for (let y = Math.max(0, move_to_y - margin); y <= Math.min(6, move_to_y + margin); y++) {\n            for (let x = Math.max(0, move_to_x - margin); x <= Math.min(6, move_to_x + margin); x++) {\n                const pos = y * 7 + x;\n\n                if (this.stones[pos] == type)\n                    squares.push(pos);\n            }\n        }\n\n        return squares;\n    }\n\n    static coordinate_to_square(coordinate: string): number {\n        const x = coordinate.charCodeAt(0) - \"a\".charCodeAt(0);\n        const y = coordinate.charCodeAt(1) - \"1\".charCodeAt(0);\n    \n        return y * 7 + x;\n    }\n    \n    static square_to_coordinate(square: number): string {\n        const x = square % 7;\n        const y = square / 7;\n    \n        return String.fromCharCode(\"a\".charCodeAt(0) + x) + String.fromCharCode(\"1\".charCodeAt(0) + y);\n    }\n}","import { Board } from './lib/board';\n\nconsole.log(Board)\n\nconst socket = io()\n\nconst new_game = document.querySelector('#create-a-game')\n\nnew_game.addEventListener('submit', event => {\n    event.preventDefault()\n    socket.emit('new_game')\n})\n\nconst join_game = document.querySelector('#join-a-game')\nconst game_id = document.querySelector('#game-id')\n\njoin_game.addEventListener('submit', event => {\n    event.preventDefault()\n    socket.emit('join_game', game_id.value)\n})\n\nsocket.on('chat', message => {\n    console.log('From server: ', message)\n})\n\nfunction clicked(id) {\n    const square = parseInt(id.charAt(1));\n    const board = new Board();\n    const squares = board.reachable_squares(Board.square_to_coordinate(square));\n\n    squares.forEach(square => {\n        document.getElementById(\"s\" + square).className(\"white\");\n    });\n}"]}